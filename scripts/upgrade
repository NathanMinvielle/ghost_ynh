#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
#REMOVEME? ynh_script_progression --message="Loading installation settings..."

#REMOVEME? app=$YNH_APP_INSTANCE_NAME

#REMOVEME? domain=$(ynh_app_setting_get --app=$app --key=domain)
#REMOVEME? path=$(ynh_app_setting_get --app=$app --key=path)
#REMOVEME? #REMOVEME? install_dir=$(ynh_app_setting_get --app=$app --key=install_dir)
#REMOVEME? port=$(ynh_app_setting_get --app=$app --key=port)
#REMOVEME? db_name=$(ynh_app_setting_get --app=$app --key=db_name)
#REMOVEME? db_user=$db_name
#REMOVEME? db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
#REMOVEME? ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
#REMOVEME? ynh_backup_before_upgrade
#REMOVEME? ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_clean_check_starting
#REMOVEME? 	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
#REMOVEME? ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
#REMOVEME? 	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# Cleaning legacy permissions
#REMOVEME? if ynh_legacy_permissions_exists; then
#REMOVEME? 	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app --action=stop

#=================================================
# CREATE DEDICATED USER
#=================================================
#REMOVEME? ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
#REMOVEME? ynh_system_user_create --username=$app --home_dir="$install_dir"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Create a temporary directory
	tmpdir="$(mktemp -d)"

	# Copy the admin saved settings from final path to tmp directory
	if [ -f "$install_dir/config.production.json" ]
	then
		# Old versions of Ghost store it here
		cp -ar "$install_dir/config.production.json" "$tmpdir/config.production.json"
	else
		# New versions of Ghost store it here
		cp -ar "$install_dir/ghost/core/config.production.json" "$tmpdir/config.production.json"
	fi

	# Backup the content folder to the temp dir
	if [ -f "$install_dir/config.production.json" ]
	then
		# Old versions of Ghost store it here
		cp -ar "$install_dir/content" "$tmpdir/content"
	else
		# New versions of Ghost store it here
		cp -ar "$install_dir/ghost/core/content" "$tmpdir/content"
	fi

	# Remove the app directory securely
#REMOVEME? 	ynh_secure_remove --file=$install_dir

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir=$install_dir

	# Download, check integrity, uncompress and patch the source from casper.src
	mkdir -p $install_dir/content/themes/casper
	ynh_setup_source --dest_dir="$install_dir/ghost/core/content/themes/casper" --source_id="casper"

	# Copy the admin saved settings from tmp directory to final path
	cp -ar "$tmpdir/config.production.json" "$install_dir/ghost/core/config.production.json"

	# Copy content folder back to the install_dir
	cp -ar "$tmpdir/content" "${install_dir}/ghost/core"

	# Remove the tmp directory securely
	ynh_secure_remove --file="$tmpdir"

	# Patch https://github.com/YunoHost-Apps/ghost_ynh/issues/199
	ynh_replace_string --match_string=".whereRaw('posts.id" --replace_string=".whereRaw('\`posts\`.id" --target_file="$install_dir/ghost/core/core/server/models/post.js"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
#REMOVEME? ynh_script_progression --message="Upgrading dependencies..."

#REMOVEME? ynh_install_app_dependencies $pkg_dependencies

# Install Nodejs
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$NODEJS_VERSION

# Install Yarn
#REMOVEME? ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_script_progression --message="Modifying a config file..."

ynh_add_config --template="../conf/config.production.json" --destination="$install_dir/ghost/core/config.production.json"
chmod 400 "$install_dir/ghost/core/config.production.json"
chown $app:$app "$install_dir/ghost/core/config.production.json"

touch "$install_dir/.yarnrc.yml"
chmod 400 "$install_dir/.yarnrc.yml"
chown $app:$app "$install_dir/.yarnrc.yml"

#==============================================
# BUILD GHOST
#==============================================

# Make the install_dir a git repo if needed
if [ ! -d "$install_dir/.git" ]; then
	ynh_exec_as $app git init "$install_dir" -q
fi

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Building Ghost... (this will take some time and resources!)"

	pushd "$install_dir"
		# Longer network timeouts for slow systems; see https://github.com/yarnpkg/yarn/issues/8242
		ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH HOME="$install_dir" yarn config set network-timeout 600000
		ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH HOME="$install_dir" yarn install --non-interactive
		ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH HOME="$install_dir" yarn add knex-migrator ember-cli --dev --ignore-workspace-root-check --non-interactive
		ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH HOME="$install_dir" yarn setup
        	pushd "ghost/admin"
			ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH HOME="$install_dir" yarn build --environment/production
		popd
	popd
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
 ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description="$app daemon for Ghost" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app --action=start --line_match="Ghost booted" --timeout=60

#=================================================
# RELOAD NGINX
#=================================================
#REMOVEME? ynh_script_progression --message="Reloading NGINX web server..."

#REMOVEME? ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
